Practicals List
1. Write a program to implement singly linked list as an ADT that supports the following operations:
Insert an element x at the beginning of the singly linked list
Insert an element x at ith position in the singly linked list
Remove an element from the beginning of the doubly linked list
Remove an element from ith position in the singly linked list.
Search for an element x in the singly linked list and return its pointer

2. Write a program to implement doubly linked list as an ADT that supports the following operations:
Insert an element x at the beginning of the doubly linked list
Insert an element x at the end of the doubly linked list
Remove an element from the beginning of the doubly linked list
Remove an element from the end of the doubly linked list

3. Write a program to implement circular linked list as an ADT which supports the following
operations:
Insert an element x in the list
Remove an element from the list
Search for an element x in the list and return its pointer

4. Implement Stack as an ADT and use it to evaluate a postfix expression.

5. Implement Queue as an ADT.

6. Write a program to implement Binary Search Tree as an ADT which supports the following
operations:
Insert an element x
Delete an element x
Search for an element x in the BST
Display the elements of the BST in preorder, inorder, and postorder traversal

7. Write a program to implement insert and search operation in AVL trees.